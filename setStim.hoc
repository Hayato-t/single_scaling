/************************************************************************************************
in the spontaneous section, whether the frequency that cells are firing is suited or not is unclear:
1. cells are injected current that makes cells fired 2 Hz in separated situation (now is this)
2. cells in network are fired in 2Hz on average ( each in network is firing in 2 Hz??) 
************************************************************************************************/


load_file("nrngui.hoc")

objref nclist_us, nclist_spon, nclist_cs
objref  us, cs, sponFire

proc setStim(){local i, j, stim_num, num_vta, dur, num_cs, stim_int, num_ecell_input, l_times, stim_dur, stim_start, stim_set_interval, stim_interval, cls localobj nc, us_tmp, cs_tmp, spon_tmp
    stim_num = $1 //stim_dur = $1
    num_vta = $2
    dur = $3
    num_cs = $4
    stim_int = $5
    num_ecell_input = $6
    l_times = $7
    stim_start = $8
    num_cell_full = $9
    
    stim_dur = stimInt*stimNum
    stim_set_interval = (stim_dur + 100) * 5
    stim_interval = stim_dur + 100
    
    nclist_us = new List()
    us = new List()
    
    for cls=0, data_num*l_times-1{
	for(i=0;i<400;i+=1){
	    if((i>=64*stim_order.x(cls) && i<64*(stim_order.x(cls)+1)) || (i>=320+16*stim_order.x(cls) && i<336+16*stim_order.x(cls))){
		if(pc.gid_exists(i+512)){
		    pc.gid2cell(i+512).soma {
			    us_tmp = new NetStim()
			    us_tmp.start = stim_start+5+stim_interval*cls
			    us_tmp.number = stim_num
			    us_tmp.interval = stim_int
			    us_tmp.noise = 0.001
			    us.append(us_tmp)
			    nc = new NetCon(us_tmp,pc.gid2cell(i+512).synlist.object(1),0,0.1,0.05)
			    nclist_us.append(nc)
		    }
		}
	    }
	}
    }
    
    nclist_cs = new List()
    cs = new List()
    for cls=0, data_num*l_times-1{
	for i=0, num_ecell_input-1 {
	    
	    if(stimuli[stim_order.x(cls)].x[i]){
		if(pc.gid_exists(i)){
		    pc.gid2cell(i).soma {
			cs_tmp = new NetStim()
			cs_tmp.start = stim_start+stim_interval*cls
			cs_tmp.number = stim_num
			cs_tmp.interval = stim_int
			cs_tmp.noise = 0
			cs.append(cs_tmp)
			nc = new NetCon(cs_tmp,pc.gid2cell(i).synlist.object(0),0,0.1,0.05)
			nclist_cs.append(nc)
		    }
		}
	    }
	}
    }
    
    for cls=0, 4 {
	for i=0, num_ecell_input-1 {
	    if(stimuli[cls].x[i]){
		if(pc.gid_exists(i)){
		    pc.gid2cell(i).soma {
			cs_tmp = new NetStim()
			cs_tmp.start = startTest+cls*600
			cs_tmp.interval = stim_int
			cs_tmp.number = 25
			cs_tmp.noise = 0
			cs.append(cs_tmp)
			nc = new NetCon(cs_tmp,pc.gid2cell(i).synlist.object(0),0,0.1,0.05)
			nclist_cs.append(nc)
		    }
		}
	    }
	}
    }
	
    
    nclist_spon = new List()
    sponFire = new List()
    
    for i=0, num_cell_full-1 {
	if(i<256 || i>=512){
	    if(pc.gid_exists(i)){
		pc.gid2cell(i).soma{
		    spon_tmp = new GammaNoise(0.85)
		    spon_tmp.amp = 0.065
		    spon_tmp.dur = dur
		    spon_tmp.del = 20
		    spon_tmp.forseed = i
		    if((i>=832 && i<912) && (i>=992 && i<1012)){
			spon_tmp.KAPPA = OUT1_SPON_I_K
			spon_tmp.THETA = OUT1_SPON_I_T
			
		    }else if(i>=512 && i<832){
			spon_tmp.KAPPA = OUT1_SPON_E_K
			spon_tmp.THETA = OUT1_SPON_E_T
		    }else if(i>=912 && i<992){
			spon_tmp.KAPPA = 0.15
		    }else{
			spon_tmp.KAPPA = 0.11
			spon_tmp.THETA = 0.25
		    }
		    nc = new NetCon(spon_tmp,pc.gid2cell(i).synlist.object(1),0,0.1,0.02)
		    sponFire.append(spon_tmp)
		    nclist_spon.append(nc)
		}
	    }
	}
    }
}
